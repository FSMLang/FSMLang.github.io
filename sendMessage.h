/**
	sendMessage.h

	This file automatically generated by FSMLang
*/

#ifndef _SENDMESSAGE_H_
#define _SENDMESSAGE_H_

#include "hsmCommunicator.h"

#ifdef SEND_MESSAGE_DEBUG
#include <stdio.h>
#include <stdlib.h>
#endif

#define DECLARE_SEND_MESSAGE_MACHINE(A) \
SEND_MESSAGE A =\
{\
	sendMessage_IDLE,\
	&sendMessage_action_array,\
	sendMessageFSM\
};\
SEND_MESSAGE *p##A = &(A);

/*
	sub-machine events are included in the top-level machine event enumeration.
	These macros set the appropriate names for events from THIS machine
	and those from the PARENT machine.

	They may be turned off as needed.
*/
#ifndef NO_EVENT_CONVENIENCE_MACROS
#undef THIS
#define THIS(A) hsmCommunicator_sendMessage_##A
#define PARENT(A) hsmCommunicator_##A
#endif

#ifdef SEND_MESSAGE_DEBUG
extern char *SEND_MESSAGE_EVENT_NAMES[];
#endif

typedef enum {
	 sendMessage_IDLE
	, sendMessage_IN_SESSION
	, sendMessage_AWAITING_ACK
	, sendMessage_numStates
} SEND_MESSAGE_STATE;

#ifdef SEND_MESSAGE_DEBUG
extern char *SEND_MESSAGE_STATE_NAMES[];
#endif

typedef struct _sendMessage_struct_ SEND_MESSAGE, *pSEND_MESSAGE;
extern SEND_MESSAGE sendMessage;

extern pSEND_MESSAGE psendMessage;

typedef HSM_COMMUNICATOR_EVENT (*SEND_MESSAGE_ACTION_FN)(pSEND_MESSAGE);

typedef HSM_COMMUNICATOR_EVENT (*SEND_MESSAGE_FSM)(pSEND_MESSAGE,HSM_COMMUNICATOR_EVENT);

HSM_COMMUNICATOR_EVENT sendMessageFSM(pSEND_MESSAGE,HSM_COMMUNICATOR_EVENT);

typedef enum { sendMessage_numEvents = 4} SEND_MESSAGE_EVENTS;
typedef struct _sendMessage_action_trans_struct_ {
	SEND_MESSAGE_ACTION_FN	action;
	SEND_MESSAGE_STATE	transition;
} SEND_MESSAGE_ACTION_TRANS, *pSEND_MESSAGE_ACTION_TRANS;

extern const SEND_MESSAGE_ACTION_TRANS sendMessage_action_array[sendMessage_numEvents][sendMessage_numStates];

struct _sendMessage_struct_ {
	SEND_MESSAGE_STATE					state;
	SEND_MESSAGE_ACTION_TRANS const	(*actionArray)[sendMessage_numEvents][sendMessage_numStates];
	SEND_MESSAGE_FSM						fsm;
};

HSM_COMMUNICATOR_EVENT sendMessage_sendMessage(pSEND_MESSAGE);
HSM_COMMUNICATOR_EVENT sendMessage_queueMessage(pSEND_MESSAGE);
HSM_COMMUNICATOR_EVENT sendMessage_checkQueue(pSEND_MESSAGE);
HSM_COMMUNICATOR_EVENT sendMessage_noAction(pSEND_MESSAGE);


#endif
